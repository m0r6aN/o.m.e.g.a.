# OMEGA Agent Dockerfile - Enterprise Edition ðŸš€
# Multi-stage build for maximum security and minimal size

# --- STAGE 1: DEPENDENCY BUILDER ---
FROM python:3.12.3-slim as dependencies

# Install build dependencies for compilation
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create virtual environment for isolation
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements first for optimal layer caching
COPY requirements.txt .

# Install Python dependencies with optimization flags
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# --- STAGE 2: RUNTIME ENVIRONMENT ---
FROM python:3.12.3-slim as runtime

# Security: Create non-root user
RUN groupadd -r omega && useradd -r -g omega -s /bin/bash omega

# Copy virtual environment from builder stage
COPY --from=dependencies /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set optimal Python settings
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PYTHONPATH=/app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=omega:omega omega/ ./omega/

# Create directories for logs and data
RUN mkdir -p /app/logs /app/data && \
    chown -R omega:omega /app

# Switch to non-root user for security
USER omega

# Health check with proper error handling and timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "\
import requests, sys, os; \
try: \
    r = requests.get(f'http://localhost:{os.getenv(\"PORT\", \"9000\")}/health', timeout=5); \
    sys.exit(0 if r.status_code == 200 else 1) \
except: \
    sys.exit(1)"

# Security: Run with minimal privileges
# No need to expose ports here - docker-compose handles that

# Graceful shutdown handling - use exec form for proper signal propagation
STOPSIGNAL SIGTERM

# Dynamic execution based on build arg
ARG AGENT_NAME
ENV AGENT_NAME=${AGENT_NAME}

# Professional module execution with proper signal handling
CMD ["sh", "-c", "exec python -m omega.agents.${AGENT_NAME}.agent"]

# --- METADATA ---
LABEL maintainer="OMEGA Dream Team <omega@legendary.dev>"
LABEL version="2.0.0"
LABEL description="Production-ready OMEGA Agent Container"
LABEL org.opencontainers.image.title="OMEGA Agent"
LABEL org.opencontainers.image.description="Orchestrated Multi-Expert Gen Agent"
LABEL org.opencontainers.image.version="2.0.0"
LABEL org.opencontainers.image.vendor="OMEGA Framework"
LABEL org.opencontainers.image.licenses="MIT"