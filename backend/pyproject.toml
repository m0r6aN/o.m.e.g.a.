[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "omega"
version = "0.0.1"
description = "Orchestrational Multi-agent Entity for Goal-oriented Accomplishment"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "OMEGA Team", email = "team@omega-project.dev"}
]
keywords = ["ai", "agents", "orchestration", "workflow", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Web framework and server
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    
    # Data validation and serialization
    "pydantic>=2.4.0,<3.0.0",
    
    # Database and caching
    "redis>=5.0.0,<6.0.0",
    "pymongo>=4.5.0,<5.0.0",
    
    # HTTP client (removed requests to avoid redundancy)
    "httpx>=0.25.0,<1.0.0",
    
    # Configuration and utilities
    "python-dotenv>=1.0.0,<2.0.0",
    "click>=8.1.0,<9.0.0",
    "pyyaml>=6.0.1,<7.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    
    # Code formatting and linting
    "black>=23.9.0,<25.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    
    # Development tools
    "pre-commit>=3.4.0,<4.0.0",
]

ai = [
    "openai>=1.75.0,<2.0.0",
    "anthropic>=0.25.0,<1.0.0",  # Added for Claude support
    "tiktoken>=0.5.0,<1.0.0",   # For token counting
]

test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
]

docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.2.0,<10.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0,<2.0.0",
]

all = [
    "omega[dev,ai,test,docs]"
]

[project.urls]
Homepage = "https://github.com/omega-team/omega"
Repository = "https://github.com/omega-team/omega"
Documentation = "https://omega-docs.readthedocs.io"
"Bug Tracker" = "https://github.com/omega-team/omega/issues"
Changelog = "https://github.com/omega-team/omega/blob/main/CHANGELOG.md"

[project.scripts]
omega = "omega.cli.main:main"

# Setuptools configuration
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["omega", "omega.*"] 
exclude = ["tests*"]

[tool.setuptools.package-data]
omega = [
    "core/schemas/*.json",
    "workflows/templates/*.yaml",
    "*.yaml",
    "*.json",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["omega"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=omega",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "pymongo.*",
    "uvicorn.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src/omega"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
