services:
  # Core Infrastructure
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - omega_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes

  mongo:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - omega_network
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-omega}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-omegapass}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Core Services - Fixed Context
  agent_registry:
    build:
      context: ./src/omega/services/agent_registry
      dockerfile: Dockerfile
    ports:
      - "9401:9401"
    environment:
      - PORT=9401
      - MONGODB_URL=mongodb://omega:omegapass@mongo:27017/agent_registry?authSource=admin
      - MONGODB_NAME=agent_registry
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - omega_network
    restart: unless-stopped

  mcp_registry:
    build:
      context: ./src/omega/services/mcp_registry
      dockerfile: Dockerfile
    ports:
      - "9402:9402"
    environment:
      - PORT=9402
      - MONGODB_URL=mongodb://omega:omegapass@mongo:27017/mcp_registry?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - omega_network
    restart: unless-stopped

  # Core Agents - Fixed Context
  orchestrator:
    build:
      context: ./src/omega/agents/orchestrator
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - PORT=9000
      - MCP_PORT=9001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - MCP_REGISTRY_URL=http://mcp_registry:9402
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

  math_solver:
    build:
      context: ./src/omega/agents/math_solver
      dockerfile: Dockerfile
    ports:
      - "9002:9002"
      - "9003:9003"
    environment:
      - PORT=9002
      - MCP_PORT=9003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

  prompt_optimizer:
    build:
      context: ./src/omega/agents/prompt_optimizer
      dockerfile: Dockerfile
    ports:
      - "9006:9006"
      - "9007:9007"
    environment:
      - PORT=9006
      - MCP_PORT=9007
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

  workflow_planner:
    build:
      context: ./src/omega/agents/workflow_planner
      dockerfile: Dockerfile
    ports:
      - "9004:9004"
      - "9005:9005"
    environment:
      - PORT=9004
      - MCP_PORT=9005
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

  capability_matcher:
    build:
      context: ./src/omega/agents/capability_matcher
      dockerfile: Dockerfile
    ports:
      - "9008:9008"
      - "9009:9009"
    environment:
      - PORT=9008
      - MCP_PORT=9009
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

  code_generator:
    build:
      context: ./src/omega/agents/code_generator
      dockerfile: Dockerfile
    ports:
      - "9014:9014"
      - "9015:9015"
    environment:
      - PORT=9014
      - MCP_PORT=9015
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

  project_architect:
    build:
      context: ./src/omega/agents/project_architect
      dockerfile: Dockerfile
    ports:
      - "9016:9016"
      - "9017:9017"
    environment:
      - PORT=9016
      - MCP_PORT=9017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REGISTRY_URL=http://agent_registry:9401
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      agent_registry:
        condition: service_started
    networks:
      - omega_network
    restart: unless-stopped

networks:
  omega_network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local